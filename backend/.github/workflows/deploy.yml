# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - dev
#   pull_request:
#     branches:
#       - dev

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#       - name: Build and push backend Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: ${{ secrets.DOCKER_HUB_USERNAME }}/task-management-backend:latest,${{ secrets.DOCKER_HUB_USERNAME }}/task-management-backend:${{ github.sha }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Scan for vulnerabilities
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/task-management-backend:${{ github.sha }}
#           format: 'table'
#           exit-code: '0' # Don't fail the pipeline, just report
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Install SSH key
#         uses: shimataro/ssh-key-action@v2
#         with:
#           key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
#           if_key_exists: replace

#       - name: Create deployment directory on VPS
#         run: ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/.deploy/${{ github.event.repository.name }}"

#       - name: Copy docker-compose to VPS
#         run: scp compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/.deploy/${{ github.event.repository.name }}/

#       - name: Deploy on VPS
#         run: |
#           ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
#             echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}' | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#             cd ~/.deploy/${{ github.event.repository.name }}
#             docker compose -f ./compose.yml pull
#             docker compose -f ./compose.yml up -d
#             docker image prune -f --filter 'until=24h'
#           "
