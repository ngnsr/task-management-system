name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # uncoment for testing local via act
      # - name: w1
      #   run: apt-get update && apt-get install docker.io -y

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/task-management:latest ./backend/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/task-management:latest

      # - name: Scan for vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/task-management:${{ github.sha }}
      #     format: 'table'
      #     exit-code: '0' # Don't fail the pipeline, just report
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment directory on VPS
        run: ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/.deploy/${{ github.event.repository.name }}"

      - name: Copy docker-compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      - name: Deploy on VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}' | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./docker-compose.yml pull
            docker compose -f ./docker-compose.yml up -d
            docker image prune -f --filter 'until=24h'
          "
